<apex:page contentType="text/javascript" standardController="Opportunity">
    // <!--@formatter:off-->
    // <script type="text/javascript">
    // @formatter:on
    /* <![CDATA[ */
    $j(function () {
        var templateName = 'Step Up';
        window.FC_OpportunityProductsForm.billingInstructionTemplates[templateName] = {

            initParameterForm: function (form, opportunityLineItemsData, selectedSeg3Record, okButton, previousValues,
                                         opportunityLineItemId, opportunityLineItemUuid, opportunityRecord, callback) {
                console.log('INIT PARAMETER FORM FOR STEP UP');
                console.log('INIT PARAMETER FORM FORM', form);
                console.log('INIT PARAMETER FORM OPPORTUNITY LINE ITEMS DATA', opportunityLineItemsData);
                console.log('INIT PARAMETER FORM SELECTED SEG3 RECORD', selectedSeg3Record);
                console.log('INIT PARAMETER FORM OK BUTTON', okButton);
                console.log('INIT PARAMETER FORM PREVIOUS VALUES', previousValues);

                var templateId = window.FC_OpportunityProductsForm.billingInstructionTemplateNameToIdMap[templateName];
                var opportunityContractEffectiveDate = moment(opportunityRecord.FC_Contract_Effective_Date__c);
                console.log("OPPORTUNITY CONTRACT EFFECTIVE DATE", opportunityContractEffectiveDate);

                var selectedProductName = selectedSeg3Record.Metrostudy_Product__c + ' | ' +
                        selectedSeg3Record.Geography_Type__c + ' | ' +
                        selectedSeg3Record.Geography__c + ' | ' +
                        selectedSeg3Record.Seg3__c + ' | ' +
                        selectedSeg3Record.Charge_Type__c;
                formConfig = {
                    id: $$(form).config.id,
                    view: 'form',
                    elements: [
                        {
                            view: 'text',
                            label: 'Selected Product',
                            labelWidth: 125,
                            readonly: true,
                            disabled: true,
                            value: selectedProductName
                        },
                        {
                            view: 'datepicker',
                            label: 'Start Date',
                            labelWidth: 125,
                            name: 'startDate',
                            required: true,
                            stringResult: true,
                            format: webix.Date.dateToStr("%m/%d/%Y"),
                            value: window.FC_OpportunityProductsForm.billingInstructionParametersDefaults.startDate || opportunityContractEffectiveDate.format('YYYY-MM-DD')
                        },
                        {
                            view: 'text',
                            label: 'List Price',
                            name: 'listPrice',
                            labelWidth: 125,
                            readonly: true,
                            disabled: true,
                            value: selectedSeg3Record.Monthly_List_Price__c
                        },
                        {
                            rows: [
                                {
                                    view: 'toolbar',
                                    cols: [
                                        {
                                            view: 'button',
                                            label: 'Add Step',
                                            width: 75,
                                            on: {
                                                onItemClick: function (id, event) {
                                                    var datatable = this.getTopParentView().queryView({ view: 'datatable' });
                                                    if (datatable) {
                                                        datatable.add({ price: 0, duration: 0 });
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                },
                                {
                                    view: 'datatable',
                                    editable: true,
                                    css: 'stepUpDatatable',
                                    columns: [
                                        { id: 'price', header: 'Price', fillspace: 1, editor: 'text' },
                                        { id: 'duration', header: 'Duration (Months)', fillspace: 1, editor: 'text' },
                                        {
                                            id: 'rightColumn',
                                            header: '',
                                            width: 50,
                                            template: '<i class="deleteStepUpRow fa fa-trash"></i>'
                                        }

                                    ],
                                    data: [],
                                    onClick: {
                                        deleteStepUpRow: function (event, id, trigger) {
                                            console.log('DELETE STEP UP ROW EVENT', event);
                                            console.log('DELETE STEP UP ROW ID', id);
                                            console.log('DELETE STEP UP ROW TRIGGER', trigger);
                                            var datatable = this.getTopParentView().queryView({ view: 'datatable' });
                                            if (datatable) {
                                                datatable.remove(id);
                                            }
                                        }
                                    }

                                }
                            ]
                        }
                    ],
                    rules: {}
                };
                form = webix.ui(formConfig, $$(form).getParentView(), $$(form));
                var stepsDatatable = form.queryView({ view: 'datatable' });
                if (previousValues) {
                    var previousStepValues = [];
                    if (previousValues.Steps) {
                        previousStepValues = previousValues.Steps.slice();
                        delete previousValues.Steps;
                    }
                    console.log('PREVIOUS VALUES', previousValues);
                    console.log('PREVIOUS STEPS', previousStepValues);
                    form.setValues(previousValues);
                    stepsDatatable.clearAll();
                    stepsDatatable.parse(previousStepValues);
                }
                $$(okButton).attachEvent('onItemClick', function (id, event) {
                    var windowBody = form.getTopParentView().getBody();
                    windowBody.showOverlay(window.FC_OpportunityProductsForm.loadingOverlay('Please wait...'));
                    if (form.validate()) {
                        var promises = [];

                        // Retrieve pricebook entry id of the product we are adding
                        var pricebookEntryModel = new SObjectModel.PricebookEntry();
                        var pricebookEntryPromise = webix.promise.defer();
                        promises.push(pricebookEntryPromise);
                        pricebookEntryModel.retrieve({
                                    where: {
                                        and: {
                                            Pricebook2Id: { eq: opportunityRecord.Pricebook2Id },
                                            Product2Id: { eq: selectedSeg3Record.Product__c }
                                        }
                                    }
                                },
                                function (pricebookEntryError, pricebookEntryResults, pricebookEntryEvent) {
                                    if (!pricebookEntryError) {
                                        pricebookEntryPromise.resolve(arguments);
                                    } else {
                                        console.error('ERROR RETRIEVING PRICEBOOK ENTRY', pricebookEntryError);
                                        pricebookEntryPromise.reject(arguments);
                                    }
                                });

                        webix.promise.all(promises).then(function (results) {

                            console.log('ALL PROMISE RESULTS', arguments);
                            var pricebookEntryResults = results[0][1];

                            if (opportunityLineItemUuid === null) {
                                opportunityLineItemUuid = uuid();
                            }

                            var billingPeriodToPriceMultiplierMap = {
                                Month: 1,
                                Quarter: 4,
                                Annual: 1,
                                Semi_Annual: 2
                            };

                            // Serialize parameters
                            var steps = [];
                            stepsDatatable.eachRow(function (id) {
                                steps.push(stepsDatatable.getItem(id));
                            }, true);
                            var instructionParameters = $j.extend({}, form.getValues(), { Steps: steps });
                            console.log('STEPS', steps);
                            console.log('INSTRUCTION PARAMETERS', instructionParameters);

                            console.log("PRODUCT START DATE", form.elements.startDate.getValue(), moment(form.elements.startDate.getValue()));

                            var startDate = moment(form.elements.startDate.getValue());
                            var isSubscribe = !opportunityRecord.ContractId &&
                                    !opportunityRecord.FC_Last_Sent_To_Zuora__c &&
                                    startDate.isSame(opportunityContractEffectiveDate, 'day');
                            console.log("IS SUBSCRIBE", isSubscribe);
                            var opportunityLineItemData = {
                                Billing_Frequency__c: window.FC_OpportunityProductsForm.billingPeriodToBillingFrequencyMap['Annual'],
                                FC_Bill_Case__c: templateName,
                                FC_Effective_Date__c: startDate.clone().toDate(),
                                FC_Geography__c: selectedSeg3Record.Geography__c, // FORMULA
                                FC_Geography_Type__c: selectedSeg3Record.Geography_Type__c, // FORMULA
                                FC_Metrostudy_Product__c: selectedSeg3Record.Metrostudy_Product__c, // FORMULA
                                FC_Product_Geography_Seg3__c: selectedSeg3Record.Id,
                                FC_Seg3__c: selectedSeg3Record.Seg3__c, // FORMULA
                                FC_UUID__c: opportunityLineItemUuid,
                                FC_Zuora_Action__c: 'Add',
                                MS_Segment__c: opportunityRecord.MS_Segments__c,
                                PricebookEntryId: pricebookEntryResults[0].get('Id'),
                                Quantity: 1,
                                FC_Sale_Price__c: 0,
                                BillingInstructionSet: {
                                    Instruction_Parameters__c: JSON.stringify(instructionParameters),
                                    Opportunity_Line_Item_UUID__c: opportunityLineItemUuid,
                                    Template__c: templateId,
                                    BillingInstructionSteps: []
                                }
                            };
                            var totalPrice = 0;
                            var totalMonths = 0;
                            for (var i = 0; i < steps.length; i++) {
                                var step = steps[i];
                                totalPrice += step.price ? Number(step.price) : 0;
                                var billingInstructionStep = {
                                    Status__c: 'New',
                                    Execute_Immediately__c: selectedSeg3Record.Execute_Immediately__c,
                                    RecordTypeId: isSubscribe && i == 0 ? window.FC_OpportunityProductsForm.billingInstructionStepRecordTypeDeveloperNameMap['Subscribe'] : window.FC_OpportunityProductsForm.billingInstructionStepRecordTypeDeveloperNameMap['Amend_Add'],
                                    Metrostudy_Product_Geography_Seg3__c: selectedSeg3Record.Id,
                                    Product_Rate_Plan__c: selectedSeg3Record.Product_Rate_Plan__c,
                                    Price__c: step.price ? Number(step.price) : 0,
                                    Billing_Instruction_Description__c: 'Step Up ' + (i + 1),
                                    Metadata_Is_Last__c: i == steps.length - 1,
                                    Metadata_Number_of_Periods__c: Number(step.duration)
                                }
                                console.log('PRE TOTAL MONTHS', totalMonths);
                                if (i < steps.length - 1) {
                                    billingInstructionStep.Contract_Effective_Date__c = startDate.clone().add(totalMonths, 'months').toDate();
                                    totalMonths += Number(step.duration);
                                    billingInstructionStep.Billing_Period__c = 'Month';
                                    billingInstructionStep.Billing_Period_Alignment__c = 'AlignToCharge';
                                    billingInstructionStep.End_Date_Condition__c = 'Fixed_Period';
                                    billingInstructionStep.Up_To_Periods_Type__c = 'Billing_Periods';
                                    billingInstructionStep.Up_To_Periods__c = Number(step.duration);
                                    billingInstructionStep.Description__c = selectedSeg3Record.Metrostudy_Product__c + ' | ' + selectedSeg3Record.Geography_Type__c + ' | ' + selectedSeg3Record.Geography__c + ' | Month';

                                } else {
                                    billingInstructionStep.Contract_Effective_Date__c = startDate.clone().add(totalMonths, 'months').toDate();
                                    billingInstructionStep.Billing_Period__c = 'Annual';
                                    billingInstructionStep.Description__c = selectedSeg3Record.Metrostudy_Product__c + ' | ' + selectedSeg3Record.Geography_Type__c + ' | ' + selectedSeg3Record.Geography__c + ' | Annual';
                                }
                                console.log('POST TOTAL MONTHS', totalMonths);
                                opportunityLineItemData.BillingInstructionSet.BillingInstructionSteps.push(billingInstructionStep);
                            }
                            opportunityLineItemData.FC_Sale_Price__c = (steps[steps.length - 1] ? Number(steps[steps.length - 1].price) : 0);

                            var rowId = opportunityLineItemId;
                            if (opportunityLineItemId === null) {

                                // Add a new opportunity line item row
                                rowId = opportunityLineItemsData.add(opportunityLineItemData);
                                window.FC_OpportunityProductsForm.billingInstructionParametersDefaults.startDate = form.elements.startDate.getValue();

                            } else {

                                // Modify opportunity line item row
                                opportunityLineItemsData.updateItem(opportunityLineItemId, opportunityLineItemData);

                            }

                            window.FC_OpportunityProductsForm.rebuildSubview(rowId);

                            form.getTopParentView().close();
                        }).fail(function (error) {
                            console.error('ALL PROMISE ERROR', error);
                        });
                    }
                });


                if (callback) {
                    callback();
                }
            }
        };
    });
    /* ]]> */
    // @formatter:off
    // </script>
    // <!--@formatter:on-->
</apex:page>